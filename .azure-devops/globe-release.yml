resources:
  repositories:
    - repository: 1ESPipelineTemplates
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

pr: none
trigger:
  - master

variables:
  - group: InfoSec-SecurityResults
  - name: tags
    value: production,externalfacing
  - name: serviceTreeID
    value: c3a0680e-4563-4c47-bce9-710df6e5485c

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates

  parameters:
    sdl:
      sourceAnalysisPool:
        name: Azure-Pipelines-1ESPT-ExDShared
        image: windows-2022
        os: windows
    stages:
      - stage: release
        variables:
          # OPTIONAL: Set this variable to 'true' to enable signing in a target stage.
          # Remove if signing is not required.
          Build.ESRP.CodeSign.Enabled: false
          # OPTIONAL: To disable required tools not applicable in the pipeline set to false.
          # Supported values: BinSkim, Roslyn, ESLint, PREFast.
          Build.SDL.<Roslyn>.Enabled: false
          Build.SDL.<ESLint>.Enabled: true
        jobs:
          - job: Release
            displayName: Globe Package Release
            pool:
              name: Azure-Pipelines-1ESPT-ExDShared
              image: ubuntu-latest
              os: linux
            templateContext:
              type: releaseJob
              isProduction: true
            steps:
              # 1. Setup and build
              - checkout: self
                persistCredentials: true # fix for beachball: https://github.com/microsoft/beachball/issues/674
              - script: yarn
                displayName: "yarn"
              - script: |
                  yarn ci
                displayName: "Build package and run tests"

              # 2. Check if version has been bumped (git-based)
              - script: |
                  set -e

                  # Check if version check should be skipped
                  if [ "$(Release.SkipVersionCheck)" = "true" ]; then
                    echo "‚ö†Ô∏è Version check is disabled via Release.SkipVersionCheck variable"
                    echo "##vso[task.logissue type=warning]Skipping version check - SHOULD_PUBLISH will be set to true"
                    echo "##vso[task.setvariable variable=SHOULD_PUBLISH]true"
                    echo "shouldPublish=true (version check skipped)"
                  else
                    echo "Performing version check..."
                    git fetch --no-tags --depth=2 origin $(Build.SourceBranchName)
                    # Compare last commit vs its parent
                    BEFORE=$(git show $(Build.SourceVersion)^:package.json | node -e "console.log(JSON.parse(require('fs').readFileSync(0,'utf8')).version)")
                    AFTER=$(node -p "require('./package.json').version")

                    SHOULD_PUBLISH=false
                    if [ "$BEFORE" != "$AFTER" ]; then
                      SHOULD_PUBLISH=true
                    fi

                    echo "From $BEFORE -> $AFTER ; shouldPublish=$SHOULD_PUBLISH"
                    echo "##vso[task.setvariable variable=SHOULD_PUBLISH]$SHOULD_PUBLISH"

                    # Friendly logging
                    if [ "$SHOULD_PUBLISH" = "true" ]; then
                      echo "‚úÖ Version bumped from $BEFORE to $AFTER. Proceeding with release."
                    else
                      echo "##vso[task.logissue type=warning]‚ö†Ô∏è No version change detected ($BEFORE). Skipping release steps."
                    fi
                  fi
                displayName: "Package version check"

              # 4. Publish build artifacts
              - task: 1ES.PublishPipelineArtifact@1
                displayName: "Publish built package"
                condition: and(succeeded(), eq(variables['SHOULD_PUBLISH'], 'true'))
                inputs:
                  artifactName: package-$(Build.BuildNumber)
                  targetPath: $(System.DefaultWorkingDirectory)/dist

              # 5. Generate npm package (.tgz)
              - script: |
                  mkdir -p $(System.DefaultWorkingDirectory)/packages
                  npm pack --pack-destination $(System.DefaultWorkingDirectory)/packages
                displayName: "Generate npm package (.tgz)"
                condition: and(succeeded(), eq(variables['SHOULD_PUBLISH'], 'true'))

              # 6. ESRP Release
              - task: EsrpRelease@9
                displayName: "ESRP Release to npm"
                condition: and(succeeded(), eq(variables['SHOULD_PUBLISH'], 'true'))
                inputs:
                  connectedservicename: $(Release.ConnectedServiceName)
                  usemanagedidentity: true
                  keyvaultname: $(Release.KeyVaultName)
                  signcertname: $(Release.SignCertName)
                  clientid: $(Release.ClientId)
                  contenttype: "npm"
                  folderlocation: $(System.DefaultWorkingDirectory)/packages
                  owners: $(Release.Owners)
                  approvers: $(Release.Approvers)
                  mainpublisher: ESRPRELPACMAN
                  domaintenantid: $(Release.DomainTenantId)

              # 7. SBOM generation
              - task: 1ES.PublishPipelineArtifact@1
                displayName: üìí Publish Manifest
                condition: and(succeeded(), eq(variables['SHOULD_PUBLISH'], 'true'))
                inputs:
                  artifactName: SBom-$(System.JobAttempt)
                  targetPath: $(System.DefaultWorkingDirectory)/_manifest

              # 8. Skip message
              - script: |
                  echo "##[section]üîÑ No version bump detected"
                  echo "##[warning]The package version has not been bumped since the last release."
                  echo "##[warning]To publish a new version:"
                  echo "##[warning]1. Run 'yarn change' to create a change file"
                  echo "##[warning]2. Run 'yarn bump' to bump the version"
                  echo "##[warning]3. Commit and push the changes"
                  echo "##[warning]4. Re-run this pipeline"
                displayName: "Version not bumped - Skip publishing"
                condition: and(succeeded(), eq(variables['SHOULD_PUBLISH'], 'false'))
